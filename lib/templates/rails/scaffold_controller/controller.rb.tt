<% module_namespacing do -%>
class <%= controller_class_name %>Controller < ApplicationController
  include Searchable
  
  expose :<%= plural_table_name %>, -> { search(<%= orm_class.build(class_name) %>.includes_associated) }
<% if attributes.include?(:slug) -%>
  expose :<%= singular_table_name %>, id: ->{ params[:slug] }, scope: ->{ <%= orm_class.build(class_name) %>.includes_associated }, find_by: :slug
  <% else -%>
  expose :<%= singular_table_name %>, scope: ->{ <%= orm_class.build(class_name) %>.includes_associated }
  <% end -%>

  sortable_fields %w(<%= permitted_params.gsub(/[:,]/, '') %>)

<%- if attributes_names.empty? -%>
  strong_params :<%= singular_table_name %>, fetch: :<%= singular_table_name %>
  <%- else -%>
  strong_params :<%= singular_table_name %>, permit: [<%= permitted_params %>]
  <%- end -%>

  def index
    authorize <%= plural_table_name %>

    paginated_<%= plural_table_name %> = paginate(<%= plural_table_name %>, :<%= plural_table_name %>)
    
    render inertia: "<%= class_name.pluralize %>/Index", props: {
      <%= plural_table_name %>: -> { paginated_<%= plural_table_name %>.render(:index) },
      pagination: -> { {
        count: <%= plural_table_name %>.size,
        **pagination_data(paginated_<%= plural_table_name %>)
      } },
    }
  end

  def show
    authorize <%= singular_table_name %>
    render inertia: "<%= class_name.pluralize %>/Show", props: {
      <%= singular_table_name %>: -> { <%= singular_table_name %>.render(:show) }
    }
  end

  def new
    authorize <%= orm_class.build(class_name) %>
    render inertia: "<%= class_name.pluralize %>/New", props: {
      <%= singular_table_name %>: <%= orm_class.build(class_name) %>.render(:form_data)
    }
  end

  def edit
    authorize <%= singular_table_name %>
    render inertia: "<%= class_name.pluralize %>/Edit", props: {
      <%= singular_table_name %>: <%= singular_table_name %>.render(:edit)
    }
  end

  def create
    authorize <%= orm_class.build(class_name) %>
    if <%= orm_instance.save %>
      redirect_to <%= singular_table_name %>, notice: <%= %("#{human_name} was successfully created.") %>
    else
      redirect_to new_<%= singular_table_name %>_path, inertia: { errors: <%= singular_table_name %>.errors }
    end
  end

  def update
    authorize <%= singular_table_name %>
    if <%= orm_instance.update("#{singular_table_name}_params") %>
      redirect_to <%= singular_table_name %>, notice: <%= %("#{human_name} was successfully updated.") %>
    else
      redirect_to edit_<%= singular_table_name %>_path, inertia: { errors: <%= singular_table_name %>.errors }
    end
  end

  def destroy
    authorize <%= singular_table_name %>
    <%= orm_instance.destroy %>
    redirect_to <%= index_helper %>_url, notice: <%= %("#{human_name} was successfully destroyed.") %>
  end
end
<% end -%>