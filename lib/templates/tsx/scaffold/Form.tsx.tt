import { Grid } from '@/Components'
import { Form, TextInput, Submit } from '@/Components/Form'
import { type HTTPVerb, type UseFormProps } from 'use-inertia-form'

type <%= singular_table_name.camelize %>FormData = {
	<%= singular_table_name %>: Schema.<%= plural_table_name.camelize %>FormData
}

export interface <%= singular_table_name.camelize %>FormProps {
	to: string
	method?: HTTPVerb
	onSubmit?: (object: UseFormProps<<%= singular_table_name.camelize %>FormData>) => boolean|void
	<%= singular_table_name %>: Schema.<%= plural_table_name.camelize %>FormData
}

const <%= singular_table_name.camelize %>Form = ({ method = 'post', <%= singular_table_name %>, ...props }: <%= singular_table_name.camelize %>FormProps) => {
	return (
		<Form
			model="<%= singular_table_name %>"
			data={ { <%= singular_table_name %> } }
			method={ method }
			{ ...props }
		>
			<Grid><% attributes.each do |column| %><% unless column.type == :references %>
				<Grid.Col>
					<TextInput name="<%= column.name %>" label="<%= column.name.capitalize %>" />
				</Grid.Col><% end %><% end %>

				<Grid.Col>
					<Submit>{ <%= singular_table_name %>.id ? 'Update' : 'Create' } <%= singular_table_name.camelize %></Submit>
				</Grid.Col>
			</Grid>
		</Form>
	)
}

export default <%= singular_table_name.camelize %>Form
